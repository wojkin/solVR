<Patterns xmlns="urn:schemas-jetbrains-com:member-reordering-patterns"
          xmlns:unity="urn:schemas-jetbrains-com:member-reordering-patterns-unity">

  <!-- Pattern to match classes used by Unity that contain serialised fields and event
       function methods. Based on the standard "Default Pattern", this will also order
       event functions before normal methods, and does not reorder serialised fields,
       as this order is reflected in the Unity editor's Inspector.
       Additionally, this pattern wraps type members in regions -->
  <TypePattern DisplayName="Unity classes" Priority="100">
    <TypePattern.Match>
      <unity:SerializableClass />
    </TypePattern.Match>
    
    <!-- The Default Pattern doesn't put fields or methods in a region, but let's call out serialized fields and event functions -->
    <Region Name="Serialized Fields">
      <Entry DisplayName="Serialized Fields">
        <Entry.Match>
          <unity:SerializedField />
        </Entry.Match>

        <!-- No sorting -->
      </Entry>
    </Region>

    <Region Name="Variables">
      <Entry DisplayName="Public Delegates" Priority="100">
        <Entry.Match>
          <And>
            <Access Is="Public" />
            <Kind Is="Delegate" />
          </And>
        </Entry.Match>
      </Entry>
      
      <Entry DisplayName="Events" Priority="100">
        <Entry.Match>
          <Kind Is="Event" />
        </Entry.Match>
      </Entry>
    
      <Entry DisplayName="Static Fields and Constants">
        <Entry.Match>
          <Or>
            <Kind Is="Constant" />
            <And>
              <Kind Is="Field" />
              <Static />
            </And>
          </Or>
        </Entry.Match>

        <Entry.SortBy>
          <Kind>
            <Kind.Order>
              <DeclarationKind>Constant</DeclarationKind>
              <DeclarationKind>Field</DeclarationKind>
            </Kind.Order>
          </Kind>
        </Entry.SortBy>
      </Entry>
  
      <Entry DisplayName="Non-serialised Fields">
        <Entry.Match>
          <And>
            <Kind Is="Field" />
            <Not>
              <unity:SerializedField />
            </Not>
          </And>
        </Entry.Match>

        <Entry.SortBy>
          <Readonly />
        </Entry.SortBy>
      </Entry>
  
      <Entry DisplayName="Properties, Indexers">
        <Entry.Match>
          <Or>
            <Kind Is="Property" />
            <Kind Is="Indexer" />
          </Or>
        </Entry.Match>
      </Entry>
    </Region>
    
    <Region Name="Public Enums" Priority="100">
      <Entry DisplayName="Public Enums" Priority="100">
        <Entry.Match>
          <And>
            <Access Is="Public" />
            <Kind Is="Enum" />
          </And>
        </Entry.Match>
      </Entry>
    </Region>
    
    <Region Name="Nested Types">
      <Entry DisplayName="Nested Types">
        <Entry.Match>
          <Kind Is="Type" />
        </Entry.Match>
      </Entry>
    </Region>
    
    <!-- The Default Pattern doesn't put fields or methods in a region, but let's call out serialized fields and event functions -->
    <Region Name="Built-in Methods">
      <Entry DisplayName="Event Functions">
        <Entry.Match>
          <unity:EventFunction />
        </Entry.Match>

        <Entry.SortBy>
          <!-- Prioritises common event functions. For alphabetical, replace with <Name /> -->
          <unity:EventFunctionName />
        </Entry.SortBy>
      </Entry>
    </Region>

    <Region Name="Custom Methods">
      <Entry DisplayName="Constructors">
        <Entry.Match>
        <Kind Is="Constructor" />
        </Entry.Match>

        <Entry.SortBy>
        <Static/>
        </Entry.SortBy>
      </Entry>
      
      <Entry DisplayName="All other members" />
    </Region>

    <Region Name="${0} Methods" Priority="100">
      <Region.GroupBy>
        <ImplementsInterface Immediate="True" />
      </Region.GroupBy>

      <Entry DisplayName="Interface Members" Priority="100">
        <Entry.Match>
          <And>
            <Kind Is="Member" />
            <ImplementsInterface />
          </And>
        </Entry.Match>

        <Entry.SortBy>
          <ImplementsInterface Immediate="true" />
        </Entry.SortBy>
      </Entry>
    </Region>
  </TypePattern>
</Patterns>
